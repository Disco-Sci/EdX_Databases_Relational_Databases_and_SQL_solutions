/* 
Question: Find the titles of all movies directed by Steven Spielberg.
Explanation: Selecting title from relation movie where the attribute 'director' has a string match with 'Steven Spielberg'
*/

select title
from movie
where director like 'Steven Spielberg';

/* 
Question: Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order.
Explanation: Select distinct values from attr. 'year' from a relation of joined tables movie and rating on mID where the 'rating' attr. has values no less than int 3 and the result is ordered by ascending years
*/

select distinct year
from movie
left join rating on movie.mID = rating.mID
where stars > 3
order by year;

/* 
Question: Find the titles of all movies that have no ratings
Explanation: Select values from attr. 'title' from a relation of joined tables movie and rating on mID where the value of rating.stars is NULL
*/

select title
from movie
left join rating on movie.mID = rating.mID
where stars is null
order by title; 

/* 
Question: Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date.
Explanation: 
*/

select reviewer.name
from (movie left join rating on movie.mID = rating.mID)
left join reviewer using(rID)
where stars is not null and ratingDate is null
order by name;

/* 
Question: Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars.
Explanation: 
*/

select rev.name, m.title, r.stars, r.ratingDate
from (movie m left join rating r on m.mID = r.mID)
left join reviewer rev using(rID)
where stars is not null
order by name, title, stars;


/* 
Question: For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie.
Explanation: 
*/

select distinct rev.name, m.title
from (movie m left join rating r using(mID))
left join reviewer rev using(rID)
where rID || mID in (
	select r1.rID || r1.mID
	from rating r1 left join rating r2
	on r1.rID = r2.rID and r1.mID = r2.mID
	where r1.stars > r2.stars and r1.ratingDate > r2.ratingDate
	);

select distinct rev.name, m.title
from (movie m left join rating r using(mID))
left join reviewer rev using(rID)
where rID in (
	select r1.rID
	from rating r1 left join rating r2
	on r1.rID = r2.rID and r1.mID = r2.mID
	where r1.stars > r2.stars and r1.ratingDate > r2.ratingDate
	) and mID in (
	select r1.mID
	from rating r1 left join rating r2
	on r1.rID = r2.rID and r1.mID = r2.mID
	where r1.stars > r2.stars and r1.ratingDate > r2.ratingDate
	);

/* 
Question: For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title.
Explanation: 
*/

select title, max(stars)
from movie left join rating using(mID)
group by mID
having count(mID) > 1
order by title;

/* 
Question: For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title.
Explanation: 
*/

select title, max(stars) - min(stars) as spread
from rating r left join movie m using(mID)
group by mID
having stars not null
order by spread desc, title

/* 
Question: Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.)
Explanation: 
*/

select abs(
		(
		select avg(value)
		from (
			select mID, avg(stars) value
			from rating
			group by mID
			) as avg_ratings
		left join movie using(mID)
		where year > 1980
		)
		-
		(
		select avg(value)
		from (
			select mID, avg(stars) value
			from rating
			group by mID
			) as avg_ratings
		left join movie using(mID)
		where year < 1980
	)
);

select avg(before) - avg(after)
from (
	
	(select avg(r.stars) before
	 from rating r
	 join movie m using(mID)
	 where m.year < 1980
   group by r.mID) temp_tab_bef,
	 
	 (select avg(r.stars) after
	 from rating r
	 join movie m using(mID)
	 where m.year > 1980
   group by r.mID) temp_tab_aft
)
	 
	 


/* 
Question: 
Explanation: 
*/

/* 
Question: 
Explanation: 
*/
